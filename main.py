import time
import datetime
import logging
import re
import random

# framework for sql queries
import mysql

# framework for telegram bot
import aiogram
from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.utils.markdown import text, italic, code, hcode, hitalic, hunderline
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

# framework for output emoji in message
from emoji import emojize
# framework for a beautiful output of the result
import tabulate

# contains telegram_bot's keyboard for selecting program functions/tables/output format of the table/database functions
import py_scripts.keyboards as kb
# contains telegram_bot's TOKEN
from py_scripts.config_bot import TOKEN
# contains sql queries for selecting database functions
import py_scripts.sql_queries as sq


# counter for aggressive mode
funny_counter = 0

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


# for enter user data into the database
class UserState(StatesGroup):
    waiting_user_string = State()


# for delete from the database
class StringState(StatesGroup):
    waiting_delete_number = State()


# input of values not provided by the functional
class Aggressive(StatesGroup):
    first_warning = State()
    second_warning = State()
    final_warning = State()


def write_log(message, name_function):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} | {user_full_name=} | {name_function=} | {message.text=} | {time.asctime()}')
    return 0


# output table "authors"
def output_authors(rows):
    data = [['code', 'name_surname', 'birthday']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        name = row_unprocessed[1]
        birthday = str(row_unprocessed[2])

        # for a beautiful output of the result
        list_for_insert = [counter, name, birthday]
        data.insert(counter, list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


# output table "books"
def output_books(rows):
    data = [['code', 'title', 'code_author', 'pages', 'code_publish']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        title = row_unprocessed[1]
        code_author = row_unprocessed[2]
        pages = row_unprocessed[3]
        code_publish = row_unprocessed[4]

        # for a beautiful output of the result
        list_for_insert = [counter, title, code_author, pages, code_publish]
        data.insert(counter, list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


# output extended table "books"
def help_output_books(rows):
    data = [['code', 'title', 'name_author', 'pages', 'code_publish']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        title = row_unprocessed[1]
        code_author = row_unprocessed[2]

        # sql query for search for a name authors by code
        name_author_unprocessed = sq.sql_output_code("name_author", "authors", "code_author", int(code_author))
        name_author = name_author_unprocessed[0]

        pages = row_unprocessed[3]
        code_publish = row_unprocessed[4]

        # sql query for search for a name publish by code
        publish_unprocessed = sq.sql_output_code("publish", "publishing_house", "code_publish", int(code_publish))
        publish = publish_unprocessed[0]

        # for a beautiful output of the result
        list_for_insert = [counter, title, name_author, pages, publish]
        data.insert(counter, list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


# output table "deliveries"
def output_deliveries(rows):
    data = [['code', 'delivery', 'company', 'address', 'phone', 'OGRN']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        delivery = row_unprocessed[1]
        company = row_unprocessed[2]
        address = row_unprocessed[3]
        phone = row_unprocessed[4]
        ogrn = row_unprocessed[5]

        # for a beautiful output of the result
        list_for_insert = [counter, delivery, company, address, phone, ogrn]
        data.insert(counter, list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


# output table "publishing_house"
def output_publishing_house(rows):
    data = [['code', 'publishing_house', 'city']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        publishing_house = row_unprocessed[1]
        city = row_unprocessed[2]

        # for a beautiful output of the result
        list_for_insert = [counter, publishing_house, city]
        data.insert(counter, list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


# output table "purchases"
def output_purchases(rows):
    data = [['code', 'code_book', 'date_order', 'code_delivery', 'amount']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        code_book = row_unprocessed[1]
        date_order = row_unprocessed[2]
        code_delivery = row_unprocessed[3]
        amount = row_unprocessed[4]

        # for a beautiful output of the result
        list_for_insert = [counter, code_book, date_order, code_delivery, amount]
        data.insert(counter, list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


# output extended table "purchases"
def help_output_purchases(rows):
    data = [['code', 'name_book', 'date_order', 'name_delivery', 'amount']]

    for row_unprocessed in rows:
        counter = row_unprocessed[0]
        code_book = row_unprocessed[1]

        # sql query for search for a name book by code
        name_book_unprocessed = sq.sql_output_code("title_book", "books", "code_book", int(code_book))
        name_book = name_book_unprocessed[0]

        date_order = row_unprocessed[2]
        code_delivery = row_unprocessed[3]

        # sql query for search for a name delivery by code
        name_delivery_unprocessed = sq.sql_output_code("Name_delivery", "deliveries",
                                                       "code_delivery", int(code_delivery))
        name_delivery = name_delivery_unprocessed[0]
        amount = row_unprocessed[4]

        # for a beautiful output of the result
        list_for_insert = [counter, name_book, date_order, name_delivery, amount]
        data.append(list_for_insert)

    # for a beautiful output of the result
    rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
    return rows_message


flag = ''
flag_table = ''
name_table = ''
user_check = ''


@dp.message_handler(commands=['start'], state="*")
async def start_handler(message: types.Message, state: FSMContext):
    name_function = 'start'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()
    user_full_name = message.from_user.full_name

    sticker_id = 'CAACAgIAAxkBAAIJz2RBrH9FFhptBeObQ2bzYAHLqNChAAIOAAMOR8co1hNgkbBsfpkvBA'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name}!\n"
                        f"–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–Ω–∏–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=kb.greet_kb)


@dp.message_handler(commands=['back'], state="*")
async def back_handler(message: types.Message, state: FSMContext):
    name_function = 'back'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    sticker_id = 'CAACAgIAAxkBAAIJ9GRBrgF5iz1cw76EWm7TmM-BU7IeAALwQwAC6VUFGMx1yzGbj_KrLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=kb.greet_kb)


@dp.message_handler(filters.Text(['/help', '–ü–æ–º–æ—â—å']), state="*")
async def process_help_command(message: types.Message, state: FSMContext):
    name_function = 'help'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    sticker_id = 'CAACAgIAAxkBAAIKDmRBroBj4vcb-68cr0dtqY1UMrSrAAJkNAAC6VUFGIkDwHeRWb8tLwQ'
    await message.reply_sticker(sticker_id)
    await message.reply("–¢—É—Ç –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ø–æ–º–æ—â—å, –Ω–æ...üòÆ"
                        "\n–Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, —á–µ–º —Ç—É—Ç –ø–æ–º–æ—á—å... –í—Å—ë –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ\n    "
                        "\n–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ –∏ —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏..."
                        "\n–ù—É –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –æ–ø—è—Ç—å –∂–µ —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏"
                        "\n–£–¥–æ–±–Ω—ã–µ... –ö—Ä–∞—Å–∏–≤—ã–µ..."
                        "\n–ù–∞–∂–º–∏—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—åü•∞"
                        "\n–ó–Ω–∞–µ—Ç–µ –ª–∏, –≥—Ä–µ—Ö –∏—Ö –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—åüëá",
                        reply_markup=kb.greet_kb)


@dp.message_handler(commands="cancel", state="*")
async def cancel_get_user_string(message: types.Message, state: FSMContext):
    name_function = 'cancel'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    sticker_id = 'CAACAgIAAxkBAAIJwmRBq3iwMS7-zBFucjzJ2jfx0f2YAAJdAAOQczMb4eoMAAEMJG5kLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=kb.greet_kb)


@dp.message_handler(filters.Text("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"), state="*")
async def process_input_table_db(message: types.Message, state: FSMContext):
    global flag
    name_function = 'input_table'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    flag = 'input'

    sticker_id = 'CAACAgQAAxkBAAIKEGRBrrcgk8EJgb2QLCSyS0gZxnykAAL-DAACCfvAUuUu-nWPfzh4LwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–≤–æ–¥–∞ (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /back)",
                        reply_markup=kb.output_table_kb)


@dp.message_handler(filters.Text("–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"), state="*")
async def process_output_table_db(message: types.Message, state: FSMContext):
    global flag
    name_function = 'output'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    flag = 'output'

    sticker_id = 'CAACAgIAAxkBAAIKEmRBrvimodMbJrCRy8cYXO-qhH7-AAJ5LAAC6VUFGE9k5JtV8M8pLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /back)",
                        reply_markup=kb.output_format_kb)


@dp.message_handler(filters.Text(['–° –∫–æ–¥–∞–º–∏', '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞']), state="*")
async def process_format_output_table_db(message: types.Message, state: FSMContext):
    global flag_format_output
    name_function = 'format_output'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    if message.text == '–° –∫–æ–¥–∞–º–∏':
        flag_format_output = 'with_code'
    if message.text == '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞':
        flag_format_output = 'Extended'

    sticker_id = 'CAACAgIAAxkBAAIKEmRBrvimodMbJrCRy8cYXO-qhH7-AAJ5LAAC6VUFGE9k5JtV8M8pLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /back)",
                        reply_markup=kb.output_table_kb)


@dp.message_handler(filters.Text("–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"), state="*")
async def process_delete_from_table_db(message: types.Message, state: FSMContext):
    global flag
    name_function = 'delete'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    flag = 'delete'

    sticker_id = 'CAACAgIAAxkBAAM5ZG0MV5xuI6gqxMHv8cs15a9zSvIAAn43AALpVQUYv6Is4c8gVWovBA'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É\n"
                        "(–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /back)",
                        reply_markup=kb.output_table_kb)


@dp.message_handler(filters.Text(["–ê–≤—Ç–æ—Ä—ã", "–ö–Ω–∏–≥–∏", "–°–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏", "–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–ó–∞–∫–∞–∑—ã"]), state="*")
async def process_select_table(message: types.Message, state: FSMContext):
    global name_table
    name_function = 'select_table'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    if message.text == "–ê–≤—Ç–æ—Ä—ã":
        name_table = "authors"
    if message.text == "–ö–Ω–∏–≥–∏":
        name_table = "books"
    if message.text == "–°–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏":
        name_table = "deliveries"
    if message.text == "–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞":
        name_table = "publishing_house"
    if message.text == "–ó–∞–∫–∞–∑—ã":
        name_table = "purchases"

    if flag == 'input':
        sticker_id = 'CAACAgIAAxkBAAIKOWRBsWxJLElyecUdVcuEXbL4s95aAAIUHwACHBGpShPDJScebBqXLwQ'
        await bot.send_sticker(message.chat.id, sticker_id)

        if name_table == "authors":
            message_text = text('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n',
                                hcode('name_surname date_birthday(YYYY-MM-DD)'), '\n\n',
                                hitalic('–î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                        '–í–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ - –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ'),
                                hcode('_'), '\n\n\n',
                                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel')
            await bot.send_message(message.from_user.id, message_text, parse_mode="HTML",
                                   reply_markup=types.ReplyKeyboardRemove())

            # waiting for user data to be entered into the database
            await UserState.waiting_user_string.set()

        if name_table == "books":

            # auxiliary tables
            rows_authors = sq.sql_output_table('authors')  # sql query for table output
            rows_message_authors = output_authors(rows_authors)
            rows_publish = sq.sql_output_table('publishing_house')  # sql query for table output
            rows_message_publish = output_publishing_house(rows_publish)

            await bot.send_message(message.from_user.id, "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\nAuthors\n" + rows_message_authors,
                                   parse_mode='HTML')
            await bot.send_message(message.from_user.id, "publishing_house\n" + rows_message_publish, parse_mode='HTML')

            message_text = text('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n',
                                hcode('title_book code_author pages code_publish'), '\n\n',
                                hunderline('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 5\n'),
                                hitalic('–î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                        '–í–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ - –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ\n'
                                        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–≤–æ–¥–∞\n'),
                                hcode('code_author'), '–∏',
                                hcode('code_publish'), '\n\n\n',
                                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel')
            await bot.send_message(message.from_user.id, message_text, parse_mode="HTML",
                                   reply_markup=types.ReplyKeyboardRemove())

            # waiting for user data to be entered into the database
            await UserState.waiting_user_string.set()

        if name_table == "deliveries":
            message_text = text('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n',
                                hcode('name_delivery name_company address phone OGRN'), '\n\n',
                                hitalic('–î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                        '–í–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ - –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ'), '\n\n\n',
                                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel')
            await bot.send_message(message.from_user.id, message_text, parse_mode="HTML",
                                   reply_markup=types.ReplyKeyboardRemove())

            # waiting for user data to be entered into the database
            await UserState.waiting_user_string.set()

        if name_table == "publishing_house":
            message_text = text('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n',
                                hcode('publishing_house city'), '\n\n',
                                hitalic('–î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                        '–í–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ - –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ'), '\n\n\n',
                                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel')
            await bot.send_message(message.from_user.id, message_text, parse_mode="HTML",
                                   reply_markup=types.ReplyKeyboardRemove())

            # waiting for user data to be entered into the database
            await UserState.waiting_user_string.set()

        if name_table == "purchases":
            # auxiliary tables
            rows_books = sq.sql_output_table('books')  # sql query for table output
            rows_message_books = help_output_books(rows_books)
            rows_deliveries = sq.sql_output_table('deliveries')  # sql query for table output
            rows_message_deliveries = output_deliveries(rows_deliveries)

            await bot.send_message(message.from_user.id, "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\nBooks\n" + rows_message_books,
                                   parse_mode='HTML')
            await bot.send_message(message.from_user.id, "deliveries\n" + rows_message_deliveries, parse_mode='HTML')

            message_text = text('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n',
                                hcode('code_book date_order(YYYY-MM-DD), code_delivery, amount\n'),
                                '\n\n',
                                hitalic('–î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n'
                                        '–í–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ - –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ\n'
                                        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–≤–æ–¥–∞\n'),
                                hcode('code_book'), '–∏',
                                hcode('code_delivery'), '\n\n\n',
                                '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel')
            await bot.send_message(message.from_user.id, message_text, parse_mode="HTML",
                                   reply_markup=types.ReplyKeyboardRemove())

            # waiting for user data to be entered into the database
            await UserState.waiting_user_string.set()

    if flag == 'output':
        if flag_format_output == 'with_code':
            # sql query for table output
            rows = sq.sql_output_table(name_table)

            if name_table == "authors":
                rows_message = output_authors(rows)
            if name_table == "books":
                rows_message = output_books(rows)
            if name_table == "deliveries":
                rows_message = output_deliveries(rows)
            if name_table == "publishing_house":
                rows_message = output_publishing_house(rows)
            if name_table == "purchases":
                rows_message = output_purchases(rows)

            sticker_id = 'CAACAgIAAxkBAAIKFGRBr3ntH9cNe4bBG0PGvfGld_u6AALnLgAC4KOCB8flxtpDPV_ILwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await bot.send_message(message.from_user.id, rows_message, parse_mode='HTML', reply_markup=kb.greet_kb)
        if flag_format_output == 'Extended':
            sticker_id = 'CAACAgIAAxkBAAIKFGRBr3ntH9cNe4bBG0PGvfGld_u6AALnLgAC4KOCB8flxtpDPV_ILwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            # sql query for table output
            rows = sq.sql_output_table(name_table)
            if name_table == "authors":
                await bot.send_message(message.from_user.id, output_authors(rows), parse_mode='HTML',
                                       reply_markup=kb.greet_kb)
            if name_table == "books":
                await bot.send_message(message.from_user.id, help_output_books(rows), parse_mode='HTML',
                                       reply_markup=kb.greet_kb)
            if name_table == "deliveries":
                await bot.send_message(message.from_user.id, output_deliveries(rows), parse_mode='HTML',
                                       reply_markup=kb.greet_kb)
            if name_table == "publishing_house":
                await bot.send_message(message.from_user.id, output_publishing_house(rows), parse_mode='HTML',
                                       reply_markup=kb.greet_kb)
            if name_table == "purchases":
                await bot.send_message(message.from_user.id, help_output_purchases(rows), parse_mode='HTML',
                                       reply_markup=kb.greet_kb)

    if flag == 'delete':
        sticker_id = 'CAACAgIAAxkBAAODZG0PuZ8JvmgLbjhaQTygHyVy0VEAAoIVAAKGirFKZsIRBLomVCIvBA'
        await bot.send_sticker(message.chat.id, sticker_id)

        # sql query for table output
        rows = sq.sql_output_table(name_table)
        if name_table == "authors":
            await bot.send_message(message.from_user.id, output_authors(rows), parse_mode='HTML')
        if name_table == "books":
            await bot.send_message(message.from_user.id, help_output_books(rows), parse_mode='HTML')
        if name_table == "deliveries":
            await bot.send_message(message.from_user.id, output_deliveries(rows), parse_mode='HTML')
        if name_table == "publishing_house":
            await bot.send_message(message.from_user.id, output_publishing_house(rows), parse_mode='HTML')
        if name_table == "purchases":
            await bot.send_message(message.from_user.id, help_output_purchases(rows), parse_mode='HTML')

        message_text = text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã\n',
                            '–ü—Ä–∏–º–µ—Ä: ', hcode('1'), ' –∏–ª–∏ ', hcode('357'), '\n\n\n',
                            '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel')

        await bot.send_message(message.from_user.id, message_text, parse_mode="HTML",
                               reply_markup=types.ReplyKeyboardRemove())

        # waiting for user data to be deleted from the database
        await StringState.waiting_delete_number.set()


@dp.message_handler(state=UserState.waiting_user_string)
async def get_user_string_for_input(message: types.Message, state: FSMContext):
    name_function = 'string_for_table'
    write_log(message, name_function)

    if re.search('[–∞-—è–ê-–Ø–Å—ë]', message.text):
        sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
        await bot.send_sticker(message.chat.id, sticker_id)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!"
                             "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel")
        return

    if name_table == "authors":  # template: name_surname YYYY-MM-DD
        try:
            list_string = message.text.split()
            date = datetime.datetime.strptime(list_string[1], '%Y-%m-%d')
            value_birthday = str(date.date())

        # non-template input
        except ValueError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return
        except IndexError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

        pattern = '[a-zA-Z]*_[a-zA-Z]*'
        value_name_author = list_string[0]

        # non-template input field "authors"
        if not re.fullmatch(pattern, value_name_author):
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

        try:
            answer_unprocessed = str(sq.sql_input_in_table_authors(value_name_author, value_birthday))

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    if name_table == "books":  # template: title_book code_author pages code_publish
        try:
            list_string = message.text.split()
            title_book = list_string[0]
            code_author = int(list_string[1])
            pages = int(list_string[2])
            code_publish = int(list_string[3])

        # non-template input
        except ValueError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return
        except IndexError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

        try:
            answer_unprocessed = str(sq.sql_input_in_table_books(title_book, code_author, pages, code_publish))

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    if name_table == "deliveries":  # template: name_delivery name_company address phone OGRN
        try:
            list_string = message.text.split()
            name_delivery = list_string[0]
            name_company = list_string[1]
            address = list_string[2]
            phone = int(list_string[3])
            ogrn = int(list_string[4])

        # non-template input
        except ValueError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return
        except IndexError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

        try:
            answer_unprocessed = str(sq.sql_input_in_table_deliveries(name_delivery, name_company,
                                                                      address, phone, ogrn))

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    if name_table == "publishing_house":  # template: publishing_house city
        try:
            list_string = message.text.split()
            publishing_house = list_string[0]
            city = list_string[1]

        # non-template input
        except IndexError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

        try:
            answer_unprocessed = str(sq.sql_input_in_table_publishing_house(publishing_house, city))

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    if name_table == "purchases":  # template: code_book date_order, code_delivery, amount
        try:
            list_string = message.text.split()
            code_book = int(list_string[0])
            date = datetime.datetime.strptime(list_string[1], '%Y-%m-%d')
            date_order = str(date.date())
            code_delivery = int(list_string[2])
            amount = float(list_string[3])

        # non-template input
        except ValueError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return
        except IndexError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

        try:
            answer_unprocessed = str(sq.sql_input_in_table_purchases(code_book, date_order, code_delivery, amount))

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    # user data to be entered into the database
    await state.update_data(user_string=message.text)
    data = await state.get_data()

    # notification of successful completion
    answer = re.sub(r'[(),]', "", answer_unprocessed)

    sticker_id = 'CAACAgQAAxkBAAIKMmRBsGyW_A_XseQQVJaARWnw41zfAAI-AQACqCEhBrJy8YE-YrIMLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.answer(f"–í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ \"{data['user_string']}\" —É—Å–ø–µ—à–Ω–∞ –∑–∞–Ω–µ—Å–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {answer} –ø–æ–∑–∏—Ü–∏—é",
                         reply_markup=kb.greet_kb)

    # result of successful execution
    rows = sq.sql_output_table(name_table)
    if name_table == "authors":
        await bot.send_message(message.from_user.id, output_authors(rows), parse_mode='HTML')
    if name_table == "books":
        await bot.send_message(message.from_user.id, help_output_books(rows), parse_mode='HTML')
    if name_table == "deliveries":
        await bot.send_message(message.from_user.id, output_deliveries(rows), parse_mode='HTML')
    if name_table == "publishing_house":
        await bot.send_message(message.from_user.id, output_publishing_house(rows), parse_mode='HTML')
    if name_table == "purchases":
        await bot.send_message(message.from_user.id, help_output_purchases(rows), parse_mode='HTML')

    # stop waiting for user data to be entered into the database
    await state.finish()


@dp.message_handler(state=StringState.waiting_delete_number)
async def get_user_number_for_delete(message: types.Message, state: FSMContext):  # (some one number) template: /d+
    name_function = 'number_for_delete'
    write_log(message, name_function)

    # non-template input
    if re.search(r'\D+', message.text):
        sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
        await bot.send_sticker(message.chat.id, sticker_id)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ!"
                             "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel")
        return

    # input - 0
    if re.fullmatch(r'0', message.text):
        sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
        await bot.send_sticker(message.chat.id, sticker_id)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –≤–≤–æ–¥–∏—Ç–µ 0... –ó–∞—á–µ–º?\n"
                             "–ü–æ–≥–ª—è–¥–∏—Ç–µ, –Ω–µ—Ç –∂–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º..."
                             "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–∞–Ω–¥–∞ /cancel")
        return

    # delete from table "authors"
    if name_table == "authors":
        try:
            sq.sql_delete_from_table_authors(message.text)  # sql query for delete from the table

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    # delete from table "books"
    if name_table == "books":
        try:
            sq.sql_delete_from_table_books(message.text)  # sql query for delete from the table

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    # delete from table "deliveries"
    if name_table == "deliveries":
        try:
            sq.sql_delete_from_table_deliveries(message.text)  # sql query for delete from the table

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    # delete from table "publishing_house"
    if name_table == "publishing_house":
        try:
            sq.sql_delete_from_table_publishing_house(message.text)  # sql query for delete from the table

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    # delete from table "purchases"
    if name_table == "purchases":
        try:
            sq.sql_delete_from_table_purchases(message.text)  # sql query for delete from the table

        # non-template input
        except mysql.connector.errors.DataError:
            sticker_id = 'CAACAgIAAxkBAAIKMGRBr9YDFYSloaHsTh4v9XzRcs-EAAJJCwACZ48hSo1PZZN4TIGRLwQ'
            await bot.send_sticker(message.chat.id, sticker_id)

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤—ë–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥"
                                 "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è = –∫–æ–º–∞–Ω–¥–∞ /cancel")
            return

    # user data to be deleted from the database
    await state.update_data(delete_number=message.text)
    data = await state.get_data()

    sticker_id = 'CAACAgIAAxkBAAIBcmRtHfb1AV-Map2-_UrYeEMEgR0AA3wsAALpVQUYN1pRhvpxOmQvBA'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.answer(f"–í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ \"{data['delete_number']}\" —É—Å–ø–µ—à–Ω–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {name_table}",
                         reply_markup=kb.greet_kb)

    # result of successful execution
    rows = sq.sql_output_table(name_table)  # sql query for delete table output
    if name_table == "authors":
        await bot.send_message(message.from_user.id, output_authors(rows), parse_mode='HTML')
    if name_table == "books":
        await bot.send_message(message.from_user.id, help_output_books(rows), parse_mode='HTML')
    if name_table == "deliveries":
        await bot.send_message(message.from_user.id, output_deliveries(rows), parse_mode='HTML')
    if name_table == "publishing_house":
        await bot.send_message(message.from_user.id, output_publishing_house(rows), parse_mode='HTML')
    if name_table == "purchases":
        await bot.send_message(message.from_user.id, help_output_purchases(rows), parse_mode='HTML')

    # stop waiting for user data to be deleted from the database
    await state.finish()


@dp.message_handler(filters.Text("–í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏"), state="*")
async def process_select_function(message: types.Message, state: FSMContext):
    name_function = 'select_function'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    sticker_id = 'CAACAgIAAxkBAAIKPmRBshqWxIcnfgl7nidDOsEtpSGKAALrFQACFHHAS6IldI7EubbeLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /back)", reply_markup=kb.functions_table_kb)


@dp.message_handler(filters.Text(['–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–¢–æ–ø –∫–Ω–∏–≥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
                                  '–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º']), state="*")
async def process_function_execution(message: types.Message, state: FSMContext):
    name_function = 'execution_function'
    write_log(message, name_function)

    # stop aggressive mode
    await state.finish()

    user_function = message.text

    sticker_id = 'CAACAgIAAxkBAAIKPWRBshrBNyghM2PMeGj72Pq3wiVWAAJ8FAAC-ERoSMJeKBz08FQCLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    if user_function == '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏':
        user_function = '* FROM purchases ORDER BY Amount DESC;'

        # sql query for functions
        rows = sq.sql_output_function(user_function)
        answer_message = "–§—É–Ω–∫—Ü–∏—è: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n" + "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + \
                         help_output_purchases(rows)

    if user_function == '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫':
        user_function = 'AvgPurchase()'

        # sql query for functions
        answer_unprocessed = str(sq.sql_output_function(user_function)[0])
        answer = re.sub(r'[(),]', "", answer_unprocessed)
        answer_message = text("–§—É–Ω–∫—Ü–∏—è: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫" +
                              "\n–†–µ–∑—É–ª—å—Ç–∞—Ç:" +
                              "\n    –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ = " + hcode(answer))

    if message.text == '–¢–æ–ø –∫–Ω–∏–≥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º':
        user_function = 'code_book, COUNT(code_book) AS total FROM purchases GROUP BY code_book ORDER BY total DESC'

        # sql query for functions
        rows = sq.sql_output_function(user_function)
        data = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']]

        for row_unprocessed in rows:
            code_book = row_unprocessed[0]

            # sql query for search for a name book by code
            title_book_unprocessed = sq.sql_output_code("title_book", "books", "code_book", int(code_book))
            title_book = title_book_unprocessed[0]
            count_books = row_unprocessed[1]

            # for a beautiful output of the result
            list_for_insert = [title_book, count_books]
            data.append(list_for_insert)

        # for a beautiful output of the result
        rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
        answer_message = "–§—É–Ω–∫—Ü–∏—è: –¢–æ–ø –∫–Ω–∏–≥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n" + "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + rows_message

    if message.text == '–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º':
        user_function = 'code_book, COUNT(code_book) AS total FROM purchases GROUP BY code_book ORDER BY total DESC'

        # sql query for functions
        rows = sq.sql_output_function(user_function)
        data = [['–§–ò–û –∞–≤—Ç–æ—Ä–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']]

        for row_unprocessed in rows:
            code_book = row_unprocessed[0]

            # sql query for search for a name book by code
            code_author_unprocessed = sq.sql_output_code("code_author", "books", "code_book", int(code_book))
            code_author = code_author_unprocessed[0]

            # sql query for search for a name author by code
            name_author_unprocessed = sq.sql_output_code("name_author", "authors", "code_author", int(code_author))
            name_author = name_author_unprocessed[0]
            count_books = row_unprocessed[1]

            # for a beautiful output of the result
            list_for_insert = [name_author, count_books]
            data.append(list_for_insert)

        # for a beautiful output of the result
        rows_message = '<pre>' + tabulate.tabulate(data) + '</pre>'
        answer_message = "–§—É–Ω–∫—Ü–∏—è: –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n" + "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + rows_message

    await bot.send_message(message.from_user.id, answer_message, reply_markup=kb.greet_kb, parse_mode='HTML')


@dp.message_handler(content_types=types.ContentType.ANY)
async def unknown_message(message: types.Message):
    name_function = 'unknown_message'
    write_log(message, name_function)

    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    message_text = text(emojize('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤'),
                        italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏...\n–ù—É –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/help', '\n–ù—É –º–∞–ª–æ –ª–∏ –ø–æ–º–æ–∂–µ—Ç...')

    logging.info(f'{user_id=} | {user_full_name=} | {message.text=} | {time.asctime()}')
    await message.reply(message_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=kb.greet_kb)

    sticker_id = 'CAACAgIAAxkBAAIKZ2RBtCdiS49S1M7U481qTRiQPL6JAAJWLAAC6VUFGFGX2gqMHlZ_LwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    # waiting for the second value not provided by the functional
    await Aggressive.first_warning.set()


@dp.message_handler(state=Aggressive.first_warning, content_types=types.ContentType.ANY)
async def second_unknown_message(message: types.Message, state: FSMContext):
    name_function = 'second_unknown_message'
    write_log(message, name_function)

    # the second value not provided by the functional
    await state.update_data(secord_user_message=message.text)

    message_text = text("–ù–µ, —è —Å–µ—Ä—å—ë–∑–Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Çüßê\n",
                        italic('–Ø –µ—â—ë —Ä–∞–∑–æ–∫ –Ω–∞–º–µ–∫–Ω—É'), ', —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/help', '\n–ù–µ —Å–æ–≤–µ—Ç—É—é –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –∫–ª—é—á–µ...')
    await message.reply(message_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=kb.greet_kb)

    sticker_id = 'CAACAgIAAxkBAAIJwGRBq2U2i6Y-EjqOCAop3bnsFuBGAAJDAAOQczMbR2Gt8nYqJWIvBA'
    await bot.send_sticker(message.chat.id, sticker_id)

    # waiting for the third value not provided by the functional
    await Aggressive.next()


@dp.message_handler(state=Aggressive.second_warning, content_types=types.ContentType.ANY)
async def third_unknown_message(message: types.Message, state: FSMContext):
    name_function = 'third_unknown_message'
    write_log(message, name_function)

    global funny_counter
    funny_counter = 0

    # the third value not provided by the functional
    await state.update_data(third_user_message=message.text)

    message_text = text("–°–µ—Ä—å—ë–∑–Ω–æ?ü§®\n",
                        "–†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º, –ª–∏–±–æ –ø–æ",
                        code('–∫–æ–º–∞–Ω–¥–∞–º'), '\n–ù–µ –∏–Ω–∞—á–µ...')
    await message.reply(message_text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=kb.greet_kb)

    sticker_id = 'CAACAgIAAxkBAAIJvmRBq1RIAns2qUUTnpDVk1QTjmUIAALXQwAC6VUFGAuq1SRIBxqeLwQ'
    await bot.send_sticker(message.chat.id, sticker_id)

    # waiting for the fourth value not provided by the functional
    await Aggressive.next()


@dp.message_handler(state=Aggressive.final_warning, content_types=types.ContentType.ANY)
async def final_unknown_message(message: types.Message, state: FSMContext):
    name_function = 'final_unknown_message'
    write_log(message, name_function)

    global funny_counter

    # the fourth value not provided by the functional
    await state.update_data(final_user_message=message.text)

    # aggressive mode
    # 3 times repeat user's message
    while funny_counter < 3:
        funny_counter += 1
        if not message.text:
            try:
                sticker_id = message.sticker.file_id  # repeat a user's sticker
                await bot.send_sticker(message.chat.id, sticker_id)

            # if user's message is someone file
            except AttributeError:
                sticker_id = 'CAACAgIAAxkBAAIKeWRBtMDLcMJK5ZyQGA9LlkU0yvBoAAKAAAOQczMb-VD4SuSITFYvBA'
                await bot.send_sticker(message.chat.id, sticker_id)
                await bot.send_message(message.chat.id, '–ù—É... –í—ã —Ä–∞–∑–æ—à–ª–∏—Å—å –Ω–∞ —Ñ–∞–π–ª—ã? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å...üòí')
            except aiogram.utils.exceptions.MessageTextIsEmpty:
                sticker_id = 'CAACAgIAAxkBAAIKeWRBtMDLcMJK5ZyQGA9LlkU0yvBoAAKAAAOQczMb-VD4SuSITFYvBA'
                await bot.send_sticker(message.chat.id, sticker_id)
                await bot.send_message(message.chat.id, '–ù—É... –í—ã —Ä–∞–∑–æ—à–ª–∏—Å—å –Ω–∞ —Ñ–∞–π–ª—ã? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å...üòí')
        # if user's message is text
        else:
            # repeat user's text
            await bot.send_message(message.chat.id, message.text)
        return

    while True:
        smile_list = ['üòÅ', 'üòí', 'üòâ', 'ü§ù', 'ü•≤', 'üòô', 'üòé', 'ü§ì', 'üòè', 'ü•∫', 'üò§', 'ü§Ø', 'ü´£',
                      'ü§≠', 'ü´°', 'ü´†', 'ü´§', 'üòë', 'üôÑ', 'üò¨', 'üëç', 'ü§û', 'üåö', 'üåù', '‚Üô']
        random_smile = random.choice(smile_list)

        sticker_id = 'CAACAgIAAxkBAAIKPGRBshqifiCSrPxjGOgl9UUQpRusAAKZFgACFEZoSBVmyntC84wLLwQ'
        await bot.send_sticker(message.chat.id, sticker_id)

        message_text = text(emojize("\n\n –ï—Å–ª–∏ –ø–æ–¥—É–º–∞–ª–∏ –Ω–∞–¥ —Å–≤–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏ –Ω–∞—É—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏, "
                                    f"—Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {random_smile}"
                                    f"\n      /back      /cancel      /help"))

        # if user's message is someone file or sticker
        if not message.text:
            try:
                # repeat user's sticker
                sticker_id = message.sticker.file_id
                await bot.send_sticker(message.chat.id, sticker_id)
            # if user's message is someone file
            except AttributeError:
                sticker_id = 'CAACAgIAAxkBAAIKe2RBtRpQSGDzKEjRfTqL8Z8rUFWcAAJFIAACpFR5SlZabV_Stf-rLwQ'
                await bot.send_sticker(message.chat.id, sticker_id)
                await bot.send_message(message.chat.id, '–ù—É... –í—ã —Ä–∞–∑–æ—à–ª–∏—Å—å –Ω–∞ —Ñ–∞–π–ª—ã? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å...üòí')
            except aiogram.utils.exceptions.MessageTextIsEmpty:
                sticker_id = 'CAACAgIAAxkBAAIKe2RBtRpQSGDzKEjRfTqL8Z8rUFWcAAJFIAACpFR5SlZabV_Stf-rLwQ'
                await bot.send_sticker(message.chat.id, sticker_id)
                await bot.send_message(message.chat.id, '–ù—É... –í—ã —Ä–∞–∑–æ—à–ª–∏—Å—å –Ω–∞ —Ñ–∞–π–ª—ã? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å...üòí')
        # if user's message is text
        else:
            # repeat user's text
            await bot.send_message(message.chat.id, message.text)

        await bot.send_message(message.chat.id, message_text)
        return


if __name__ == '__main__':
    executor.start_polling(dp)
